#usda 1.0
(
    autoPlay = false
    customLayerData = {
        string creator = "usdzconvert preview 0.64"
        string identifier = "050EFEAD-6CF9-4D4B-ABB2-EC29E838D792"
    }
    defaultPrim = "Root"
    metersPerUnit = 0.01
    timeCodesPerSecond = 60
    upAxis = "Y"
)

def Xform "Root"
{
    def Scope "Scenes" (
        kind = "sceneLibrary"
    )
    {
        def Xform "Scene" (
            customData = {
                bool preliminary_collidesWithEnvironment = 0
                string sceneName = "Scene"
            }
            sceneName = "Scene"
        )
        {
            token preliminary:anchoring:type = "plane"
            token preliminary:planeAnchoring:alignment = "horizontal"

            def Xform "Gravity"
            {
                double3 physics:gravitationalForce:acceleration = (0, -9.800000190734863, 0)
            }

            def Mesh "sceneGroundPlane" (
                customData = {
                    bool preliminary_isSceneGroundPlane = 1
                }
            )
            {
                rel material:binding = </Root/Scenes/Scene/sceneGroundPlane/physicsMaterial>
                float3 normal = (0, 1, 0)
                float3 position = (0, 0, 0)
                rel preliminary:physics:collider:convexShape = </Root/Scenes/Scene/sceneGroundPlane>

                def Material "physicsMaterial"
                {
                    double preliminary:physics:material:friction:dynamic = 0.58
                    double preliminary:physics:material:friction:static = 0.58
                    double preliminary:physics:material:restitution = 0.48
                }
            }

            def Xform "Children"
            {
                def Xform "A6D8FF3B569347E48E8657D6733B90CA"
                {
                    rel material:binding = </Root/Scenes/Scene/Children/A6D8FF3B569347E48E8657D6733B90CA/PhysicsMaterial_A6D8FF3B569347E48E8657D6733B90CA>
                    quatf xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0.05000000074505806, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def Xform "Generated" (
                        prepend references = </AssetFactories/Masters/Factories/PrimitiveShapeAssetFactory_FF53F7F1>
                    )
                    {
                    }

                    def Xform "Children"
                    {
                    }

                    def Material "PhysicsMaterial_A6D8FF3B569347E48E8657D6733B90CA"
                    {
                        double preliminary:physics:material:friction:dynamic = 0.58
                        double preliminary:physics:material:friction:static = 0.58
                        double preliminary:physics:material:restitution = 0.48
                    }

                    over Cube "collider"
                    {
                        float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                        uniform token purpose = "guide"
                        double size = 1
                        quatf xformOp:orient = (0, 0, 0, 0)
                        double3 xformOp:scale = (0.10000000149011612, 0.10000000149011612, 0.10000000149011612)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                    }
                }
            }

            def Scope "Behaviors"
            {
                def Preliminary_Behavior "Behavior_1"
                {
                    rel actions = </Root/Scenes/Scene/Behaviors/Behavior_1/ActionRoot>
                    uniform bool exclusive = 0
                    rel triggers = </Root/Scenes/Scene/Behaviors/Behavior_1/Trigger_1>

                    def Preliminary_Trigger "Trigger_1"
                    {
                        token info:id = "SceneTransition"
                        token type = "enter"
                    }

                    def Preliminary_Action "ActionRoot"
                    {
                        rel actions = [
                            </Root/Scenes/Scene/Behaviors/Behavior_1/ActionRoot/Action_1>,
                            </Root/Scenes/Scene/Behaviors/Behavior_1/ActionRoot/Action_2>,
                        ]
                        token info:id = "Group"
                        bool loops = 0
                        int performCount = 1
                        token type = "serial"

                        def Preliminary_Action "Action_1"
                        {
                            rel actions = </Root/Scenes/Scene/Behaviors/Behavior_1/ActionRoot/Action_1/Action_1>
                            token info:id = "Group"
                            bool loops = 0
                            int performCount = 1
                            token type = "parallel"

                            def Preliminary_Action "Action_1"
                            {
                                rel actions = </Root/Scenes/Scene/Behaviors/Behavior_1/ActionRoot/Action_1/Action_1/Action_1>
                                token info:id = "Group"
                                bool loops = 0
                                int performCount = 1
                                token type = "parallel"

                                def Preliminary_Action "Action_1"
                                {
                                    double duration = 5
                                    token info:id = "Wait"
                                }
                            }
                        }

                        def Preliminary_Action "Action_2"
                        {
                            rel actions = </Root/Scenes/Scene/Behaviors/Behavior_1/ActionRoot/Action_2/Action_1>
                            token info:id = "Group"
                            bool loops = 0
                            int performCount = 1
                            token type = "parallel"

                            def Preliminary_Action "Action_1"
                            {
                                rel actions = </Root/Scenes/Scene/Behaviors/Behavior_1/ActionRoot/Action_2/Action_1/Action_1>
                                token info:id = "Group"
                                bool loops = 0
                                int performCount = 1
                                token type = "parallel"

                                def Preliminary_Action "Action_1"
                                {
                                    token info:id = "ChangeScene"
                                    rel scene = </Root/Scenes/Scene_1>
                                }
                            }
                        }
                    }
                }
            }
        }

        over Xform "Scene_1" (
            customData = {
                bool preliminary_collidesWithEnvironment = 0
                string sceneName = "Scene 1"
            }
            sceneName = "Scene 1"
        )
        {
            token preliminary:anchoring:type = "plane"
            token preliminary:planeAnchoring:alignment = "horizontal"

            def Xform "Gravity"
            {
                double3 physics:gravitationalForce:acceleration = (0, -9.800000190734863, 0)
            }

            def Mesh "sceneGroundPlane" (
                customData = {
                    bool preliminary_isSceneGroundPlane = 1
                }
            )
            {
                rel material:binding = </Root/Scenes/Scene_1/sceneGroundPlane/physicsMaterial>
                float3 normal = (0, 1, 0)
                float3 position = (0, 0, 0)
                rel preliminary:physics:collider:convexShape = </Root/Scenes/Scene_1/sceneGroundPlane>

                def Material "physicsMaterial"
                {
                    double preliminary:physics:material:friction:dynamic = 0.58
                    double preliminary:physics:material:friction:static = 0.58
                    double preliminary:physics:material:restitution = 0.48
                }
            }

            def Xform "Children"
            {
                def Xform "A6D8FF3B569347E48E8657D6733B90CA"
                {
                    rel material:binding = </Root/Scenes/Scene_1/Children/A6D8FF3B569347E48E8657D6733B90CA/PhysicsMaterial_A6D8FF3B569347E48E8657D6733B90CA>
                    quatf xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0.05000000074505806, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def Xform "Generated" (
                        prepend references = </AssetFactories/Masters/Factories/PrimitiveShapeAssetFactory_8CA8E2F7>
                    )
                    {
                    }

                    def Xform "Children"
                    {
                    }

                    def Material "PhysicsMaterial_A6D8FF3B569347E48E8657D6733B90CA"
                    {
                        double preliminary:physics:material:friction:dynamic = 0.58
                        double preliminary:physics:material:friction:static = 0.58
                        double preliminary:physics:material:restitution = 0.48
                    }

                    over Cube "collider"
                    {
                        float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                        uniform token purpose = "guide"
                        double size = 1
                        quatf xformOp:orient = (0, 0, 0, 0)
                        double3 xformOp:scale = (0.10000000149011612, 0.10000000149011612, 0.10000000149011612)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                    }
                }
            }

            def Scope "Behaviors"
            {
                def Preliminary_Behavior "Behavior_1"
                {
                    rel actions = </Root/Scenes/Scene_1/Behaviors/Behavior_1/ActionRoot>
                    uniform bool exclusive = 0
                    rel triggers = </Root/Scenes/Scene_1/Behaviors/Behavior_1/Trigger_1>

                    def Preliminary_Trigger "Trigger_1"
                    {
                        token info:id = "SceneTransition"
                        token type = "enter"
                    }

                    def Preliminary_Action "ActionRoot"
                    {
                        rel actions = [
                            </Root/Scenes/Scene_1/Behaviors/Behavior_1/ActionRoot/Action_1>,
                            </Root/Scenes/Scene_1/Behaviors/Behavior_1/ActionRoot/Action_2>,
                        ]
                        token info:id = "Group"
                        bool loops = 0
                        int performCount = 1
                        token type = "serial"

                        def Preliminary_Action "Action_1"
                        {
                            rel actions = </Root/Scenes/Scene_1/Behaviors/Behavior_1/ActionRoot/Action_1/Action_1>
                            token info:id = "Group"
                            bool loops = 0
                            int performCount = 1
                            token type = "parallel"

                            def Preliminary_Action "Action_1"
                            {
                                rel actions = </Root/Scenes/Scene_1/Behaviors/Behavior_1/ActionRoot/Action_1/Action_1/Action_1>
                                token info:id = "Group"
                                bool loops = 0
                                int performCount = 1
                                token type = "parallel"

                                def Preliminary_Action "Action_1"
                                {
                                    double duration = 5
                                    token info:id = "Wait"
                                }
                            }
                        }

                        def Preliminary_Action "Action_2"
                        {
                            rel actions = </Root/Scenes/Scene_1/Behaviors/Behavior_1/ActionRoot/Action_2/Action_1>
                            token info:id = "Group"
                            bool loops = 0
                            int performCount = 1
                            token type = "parallel"

                            def Preliminary_Action "Action_1"
                            {
                                rel actions = </Root/Scenes/Scene_1/Behaviors/Behavior_1/ActionRoot/Action_2/Action_1/Action_1>
                                token info:id = "Group"
                                bool loops = 0
                                int performCount = 1
                                token type = "parallel"

                                def Preliminary_Action "Action_1"
                                {
                                    token info:id = "ChangeScene"
                                    rel scene = </Root/Scenes/Scene_2>
                                }
                            }
                        }
                    }
                }
            }
        }

        over Xform "Scene_2" (
            customData = {
                bool preliminary_collidesWithEnvironment = 0
                string sceneName = "Scene 2"
            }
            sceneName = "Scene 2"
        )
        {
            token preliminary:anchoring:type = "plane"
            token preliminary:planeAnchoring:alignment = "horizontal"

            def Xform "Gravity"
            {
                double3 physics:gravitationalForce:acceleration = (0, -9.800000190734863, 0)
            }

            def Mesh "sceneGroundPlane" (
                customData = {
                    bool preliminary_isSceneGroundPlane = 1
                }
            )
            {
                rel material:binding = </Root/Scenes/Scene_2/sceneGroundPlane/physicsMaterial>
                float3 normal = (0, 1, 0)
                float3 position = (0, 0, 0)
                rel preliminary:physics:collider:convexShape = </Root/Scenes/Scene_2/sceneGroundPlane>

                def Material "physicsMaterial"
                {
                    double preliminary:physics:material:friction:dynamic = 0.58
                    double preliminary:physics:material:friction:static = 0.58
                    double preliminary:physics:material:restitution = 0.48
                }
            }

            def Xform "Children"
            {
                def Xform "A6D8FF3B569347E48E8657D6733B90CA"
                {
                    rel material:binding = </Root/Scenes/Scene_2/Children/A6D8FF3B569347E48E8657D6733B90CA/PhysicsMaterial_A6D8FF3B569347E48E8657D6733B90CA>
                    quatf xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0.05000000074505806, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def Xform "Generated" (
                        prepend references = </AssetFactories/Masters/Factories/PrimitiveShapeAssetFactory_3F971591>
                    )
                    {
                    }

                    def Xform "Children"
                    {
                    }

                    def Material "PhysicsMaterial_A6D8FF3B569347E48E8657D6733B90CA"
                    {
                        double preliminary:physics:material:friction:dynamic = 0.58
                        double preliminary:physics:material:friction:static = 0.58
                        double preliminary:physics:material:restitution = 0.48
                    }

                    over Cube "collider"
                    {
                        float3[] extent = [(-0.05, -0.05, -0.05), (0.05, 0.05, 0.05)]
                        uniform token purpose = "guide"
                        double size = 1
                        quatf xformOp:orient = (0, 0, 0, 0)
                        double3 xformOp:scale = (0.10000000149011612, 0.10000000149011612, 0.10000000149011612)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                    }
                }
            }

            def Scope "Behaviors"
            {
                def Preliminary_Behavior "Behavior_1"
                {
                    rel actions = </Root/Scenes/Scene_2/Behaviors/Behavior_1/ActionRoot>
                    uniform bool exclusive = 0
                    rel triggers = </Root/Scenes/Scene_2/Behaviors/Behavior_1/Trigger_1>

                    def Preliminary_Trigger "Trigger_1"
                    {
                        token info:id = "SceneTransition"
                        token type = "enter"
                    }

                    def Preliminary_Action "ActionRoot"
                    {
                        rel actions = [
                            </Root/Scenes/Scene_2/Behaviors/Behavior_1/ActionRoot/Action_1>,
                            </Root/Scenes/Scene_2/Behaviors/Behavior_1/ActionRoot/Action_2>,
                        ]
                        token info:id = "Group"
                        bool loops = 0
                        int performCount = 1
                        token type = "serial"

                        def Preliminary_Action "Action_1"
                        {
                            rel actions = </Root/Scenes/Scene_2/Behaviors/Behavior_1/ActionRoot/Action_1/Action_1>
                            token info:id = "Group"
                            bool loops = 0
                            int performCount = 1
                            token type = "parallel"

                            def Preliminary_Action "Action_1"
                            {
                                rel actions = </Root/Scenes/Scene_2/Behaviors/Behavior_1/ActionRoot/Action_1/Action_1/Action_1>
                                token info:id = "Group"
                                bool loops = 0
                                int performCount = 1
                                token type = "parallel"

                                def Preliminary_Action "Action_1"
                                {
                                    double duration = 5
                                    token info:id = "Wait"
                                }
                            }
                        }

                        def Preliminary_Action "Action_2"
                        {
                            rel actions = </Root/Scenes/Scene_2/Behaviors/Behavior_1/ActionRoot/Action_2/Action_1>
                            token info:id = "Group"
                            bool loops = 0
                            int performCount = 1
                            token type = "parallel"

                            def Preliminary_Action "Action_1"
                            {
                                rel actions = </Root/Scenes/Scene_2/Behaviors/Behavior_1/ActionRoot/Action_2/Action_1/Action_1>
                                token info:id = "Group"
                                bool loops = 0
                                int performCount = 1
                                token type = "parallel"

                                def Preliminary_Action "Action_1"
                                {
                                    token info:id = "ChangeScene"
                                    rel scene = </Root/Scenes/Scene>
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

def Scope "AssetFactories" (
    active = false
)
{
    def Scope "Masters"
    {
        def Scope "Factories"
        {
            def "PrimitiveShapeAssetFactory_FF53F7F1"
            {
                def "Mesh0"
                {
                    rel material:binding = </AssetFactories/Masters/Factories/PrimitiveShapeAssetFactory_FF53F7F1/Mesh0/Material>

                    def "Mesh0" (
                        instanceable = true
                        prepend references = </AssetFactories/Masters/Meshes/PrimitiveShapeAssetFactory_820F89C10>
                    )
                    {
                    }

                    def "Material" (
                        prepend references = </AssetFactories/Masters/Materials/PrimitiveShapeAssetFactory_775BADEF0>
                    )
                    {
                    }
                }
            }

            def "PrimitiveShapeAssetFactory_8CA8E2F7"
            {
                def "Mesh0"
                {
                    rel material:binding = </AssetFactories/Masters/Factories/PrimitiveShapeAssetFactory_8CA8E2F7/Mesh0/Material>

                    def "Mesh0" (
                        instanceable = true
                        prepend references = </AssetFactories/Masters/Meshes/PrimitiveShapeAssetFactory_820F89C10>
                    )
                    {
                    }

                    def "Material" (
                        prepend references = </AssetFactories/Masters/Materials/PrimitiveShapeAssetFactory_7F08DCD40>
                    )
                    {
                    }
                }
            }

            def "PrimitiveShapeAssetFactory_3F971591"
            {
                def "Mesh0"
                {
                    rel material:binding = </AssetFactories/Masters/Factories/PrimitiveShapeAssetFactory_3F971591/Mesh0/Material>

                    def "Mesh0" (
                        instanceable = true
                        prepend references = </AssetFactories/Masters/Meshes/PrimitiveShapeAssetFactory_820F89C10>
                    )
                    {
                    }

                    def "Material" (
                        prepend references = </AssetFactories/Masters/Materials/PrimitiveShapeAssetFactory_57A765770>
                    )
                    {
                    }
                }
            }
        }

        def Scope "Meshes"
        {
            def Mesh "PrimitiveShapeAssetFactory_820F89C10"
            {
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 2, 3, 1, 4, 6, 7, 5, 2, 7, 6, 3, 0, 1, 4, 5, 0, 5, 7, 2, 1, 3, 6, 4]
                point3f[] points = [(0.05, -0.05, 0.05), (-0.05, -0.05, 0.05), (0.05, 0.05, 0.05), (-0.05, 0.05, 0.05), (-0.05, -0.05, -0.05), (0.05, -0.05, -0.05), (-0.05, 0.05, -0.05), (0.05, 0.05, -0.05)]
                normal3f[] primvars:normals = [(0, 0, 1), (0, -1, -0), (0, 1, 0), (0, 0, 1), (0, 0, -1), (0, -1, -0), (0, 1, 0), (0, 0, -1), (1, -0, 0), (0, -1, -0), (-1, 0, -0), (0, 0, 1), (1, -0, 0), (0, 0, 1), (-1, 0, -0), (0, 1, 0), (-1, 0, -0), (0, -1, -0), (1, -0, 0), (0, 0, -1), (-1, 0, -0), (0, 0, -1), (1, -0, 0), (0, 1, 0)] (
                    interpolation = "faceVarying"
                )
                int[] primvars:normals:indices = [0, 13, 3, 11, 4, 21, 7, 19, 2, 23, 6, 15, 9, 1, 17, 5, 8, 18, 22, 12, 10, 14, 20, 16]
                texCoord2f[] primvars:st = [(0.6, 0.6), (0.6, 0.6), (0.6, 0.6), (0.4, 0.4), (0.6, 0.6), (0.39999998, 0.4), (0.4, 0.4), (0.39999998, 0.4), (0.39999998, 0.6), (0.39999998, 0.6), (0.6, 0.6), (0.4, 0.6), (0.39999998, 0.4), (0.6, 0.4), (0.6, 0.4), (0.4, 0.6), (0.4, 0.6), (0.6, 0.4), (0.6, 0.6), (0.39999998, 0.6), (0.4, 0.4), (0.6, 0.4), (0.6, 0.4), (0.6, 0.4)] (
                    interpolation = "faceVarying"
                )
                int[] primvars:st:indices = [0, 13, 3, 11, 4, 21, 7, 19, 2, 23, 6, 15, 9, 1, 17, 5, 8, 18, 22, 12, 10, 14, 20, 16]
                uniform token subdivisionScheme = "none"
            }
        }

        def Scope "Materials"
        {
            def Material "PrimitiveShapeAssetFactory_775BADEF0"
            {
                token outputs:surface.connect = </AssetFactories/Masters/Materials/PrimitiveShapeAssetFactory_775BADEF0/PBRShader.outputs:surface>

                def Shader "PBRShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 1
                    color3f inputs:diffuseColor = (1, 0.033104762, 0.033104762)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:metallic = 0.9
                    float inputs:roughness = 0.4
                    int inputs:useSpecularWorkflow = 0
                    token outputs:surface
                }
            }

            def Material "PrimitiveShapeAssetFactory_7F08DCD40"
            {
                token outputs:surface.connect = </AssetFactories/Masters/Materials/PrimitiveShapeAssetFactory_7F08DCD40/PBRShader.outputs:surface>

                def Shader "PBRShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 1
                    color3f inputs:diffuseColor = (0.033104762, 0.31854683, 1)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:metallic = 0.9
                    float inputs:roughness = 0.4
                    int inputs:useSpecularWorkflow = 0
                    token outputs:surface
                }
            }

            def Material "PrimitiveShapeAssetFactory_57A765770"
            {
                token outputs:surface.connect = </AssetFactories/Masters/Materials/PrimitiveShapeAssetFactory_57A765770/PBRShader.outputs:surface>

                def Shader "PBRShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 1
                    color3f inputs:diffuseColor = (0.033104762, 1, 0.033104762)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:metallic = 0.9
                    float inputs:roughness = 0.4
                    int inputs:useSpecularWorkflow = 0
                    token outputs:surface
                }
            }
        }
    }
}

